<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="17" skipped="0" tests="62" time="6162.740" timestamp="2022-07-25T10:41:55.195995" hostname="huangzi1"><testcase classname="test_VSTS41201" name="test_Materials_Search" time="99.648"><failure message="assert None is not None&#10; +  where None = &lt;bound method BaseFun.Assert_CSV of &lt;common.baseFun.BaseFun object at 0x0000021A78672A90&gt;&gt;('WDMaterialDefinitionsData')&#10; +    where &lt;bound method BaseFun.Assert_CSV of &lt;common.baseFun.BaseFun object at 0x0000021A78672A90&gt;&gt; = &lt;common.baseFun.BaseFun object at 0x0000021A78672A90&gt;.Assert_CSV&#10; +      where &lt;common.baseFun.BaseFun object at 0x0000021A78672A90&gt; = BaseFun(&lt;selenium.webdriver.chrome.webdriver.WebDriver (session=&quot;ee30cb002b123c8af687208a8e74a88b&quot;)&gt;)">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="ee30cb002b123c8af687208a8e74a88b")&gt;

    def test_Materials_Search(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Material']").click()
        time.sleep(5)
        # export CSV
        browser.refresh()
        time.sleep(5)
        browser.find_element(By.XPATH, "//a[@class='Line_No_Wrap' and text()='CSV']").click()
        time.sleep(10)
&gt;       assert BaseFun(browser).Assert_CSV("WDMaterialDefinitionsData") is not None
E       assert None is not None
E        +  where None = &lt;bound method BaseFun.Assert_CSV of &lt;common.baseFun.BaseFun object at 0x0000021A78672A90&gt;&gt;('WDMaterialDefinitionsData')
E        +    where &lt;bound method BaseFun.Assert_CSV of &lt;common.baseFun.BaseFun object at 0x0000021A78672A90&gt;&gt; = &lt;common.baseFun.BaseFun object at 0x0000021A78672A90&gt;.Assert_CSV
E        +      where &lt;common.baseFun.BaseFun object at 0x0000021A78672A90&gt; = BaseFun(&lt;selenium.webdriver.chrome.webdriver.WebDriver (session="ee30cb002b123c8af687208a8e74a88b")&gt;)

test_VSTS41201.py:18: AssertionError</failure></testcase><testcase classname="test_VSTS42290" name="test_clean_rules_states" time="71.969" /><testcase classname="test_VSTS31408" name="test_BOMEdit" time="134.143"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;[name=&quot;ingredientType&quot;]&quot;}&#10;  (Session info: chrome=103.0.5060.114)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x01175FD3+2187219]&#10;&#09;Ordinal0 [0x0110E6D1+1763025]&#10;&#09;Ordinal0 [0x01023E78+802424]&#10;&#09;Ordinal0 [0x01051C10+990224]&#10;&#09;Ordinal0 [0x01051EAB+990891]&#10;&#09;Ordinal0 [0x0107EC92+1174674]&#10;&#09;Ordinal0 [0x0106CBD4+1100756]&#10;&#09;Ordinal0 [0x0107CFC2+1167298]&#10;&#09;Ordinal0 [0x0106C9A6+1100198]&#10;&#09;Ordinal0 [0x01046F80+946048]&#10;&#09;Ordinal0 [0x01047E76+949878]&#10;&#09;GetHandleVerifier [0x014190C2+2721218]&#10;&#09;GetHandleVerifier [0x0140AAF0+2662384]&#10;&#09;GetHandleVerifier [0x0120137A+526458]&#10;&#09;GetHandleVerifier [0x01200416+522518]&#10;&#09;Ordinal0 [0x01114EAB+1789611]&#10;&#09;Ordinal0 [0x011197A8+1808296]&#10;&#09;Ordinal0 [0x01119895+1808533]&#10;&#09;Ordinal0 [0x011226C1+1844929]&#10;&#09;BaseThreadInitThunk [0x778DFA29+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="f4256fa36928eedfae7c5dbe2e9429d1")&gt;

    def test_BOMEdit(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Material']").click()
        browser.find_element(By.XPATH, "//tr/td/div[text()='BOM Exceptions']").click()
        time.sleep(10)
        bomName = BaseFun(browser).Random_Str(5)
        MaterialPage(browser).Add_BOM(bomName)
        browser.find_element(By.XPATH, "//button[@class='gwt-Button OkStyle']").click()
        pending_xpath = "//td[text()='"+bomName+"']/../td[7]"
        pending_BOM = browser.find_element(By.XPATH, pending_xpath)
        # edit the pending BOM
        pending_BOM.click()
        time.sleep(2)
        # add Material
        browser.find_element(By.XPATH, "//a[text()='Add Material']").click()
        time.sleep(3)
        # select "1072"
        browser.find_element(By.XPATH, "//td[text()='1072']/../td[1]/span/input").click()
        time.sleep(2)
        browser.find_element(By.ID, "Dialogbox_Bottom_OK_Button_Id").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//td[text()='1072']/../td[3]/img[@class='gwt-Image']").click()
        time.sleep(3)
        # select "Ingredient type":Main.
        browser.find_element(By.NAME, "ingredientType").click()
        browser.find_element(By.XPATH, "//option[text()='Main']").click()
        time.sleep(2)
        browser.find_element(By.XPATH, "//td[text()='1072']/../td[3]/img[@class='gwt-Image']").click()
        time.sleep(2)
        browser.find_element(By.ID, "edit_save_Button").click()
        time.sleep(2)
        # save successfully
        assert 'Save was successful!' in BaseFun(browser).get_AlterMessage()
        # add 1072 again on the pending BOM
        browser.find_element(By.XPATH, pending_xpath).click()
        time.sleep(2)
        browser.find_element(By.XPATH, "//a[text()='Add Material']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//td[text()='1072']/../td[1]/span/input").click()
        time.sleep(2)
        browser.find_element(By.ID, "Dialogbox_Bottom_OK_Button_Id").click()
        time.sleep(3)
        # Material code (1072) can not be added.
        assert "1072 can only be included once in the BOM exception!" in browser.find_element(By.XPATH, "//div[@class='gwt-Label Alert_Label']").text
        time.sleep(5)
        # add 2083 material
        element = browser.find_element(By.XPATH, "//div[@title='Message']//button[@class='gwt-Button OkStyle']")
        browser.execute_script("arguments[0].click();", element)
        time.sleep(2)
        browser.find_element(By.XPATH, "//td[text()='1072']/../td[1]/span/input").click()
        time.sleep(2)
        browser.find_element(By.XPATH, "//td[text()='2083']/../td[1]/span/input").click()
        time.sleep(2)
        browser.find_element(By.ID, "Dialogbox_Bottom_OK_Button_Id").click()
        time.sleep(2)
        # select "Ingredient type":Main.
        browser.find_element(By.XPATH, "//td[text()='2083']/../td[3]/img[@class='gwt-Image']").click()
&gt;       browser.find_element(By.NAME, "ingredientType").click()

test_VSTS31408.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:1248: in find_element
    return self.execute(Command.FIND_ELEMENT, {
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A78755F70&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"css selector","selector":"[name="ingredientType"]"}
E         (Session info: chrome=103.0.5060.114)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x01175FD3+2187219]
E       	Ordinal0 [0x0110E6D1+1763025]
E       	Ordinal0 [0x01023E78+802424]
E       	Ordinal0 [0x01051C10+990224]
E       	Ordinal0 [0x01051EAB+990891]
E       	Ordinal0 [0x0107EC92+1174674]
E       	Ordinal0 [0x0106CBD4+1100756]
E       	Ordinal0 [0x0107CFC2+1167298]
E       	Ordinal0 [0x0106C9A6+1100198]
E       	Ordinal0 [0x01046F80+946048]
E       	Ordinal0 [0x01047E76+949878]
E       	GetHandleVerifier [0x014190C2+2721218]
E       	GetHandleVerifier [0x0140AAF0+2662384]
E       	GetHandleVerifier [0x0120137A+526458]
E       	GetHandleVerifier [0x01200416+522518]
E       	Ordinal0 [0x01114EAB+1789611]
E       	Ordinal0 [0x011197A8+1808296]
E       	Ordinal0 [0x01119895+1808533]
E       	Ordinal0 [0x011226C1+1844929]
E       	BaseThreadInitThunk [0x778DFA29+25]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]

f:\python\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VSTS43508" name="test_modify_booth" time="73.473"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//td[text()='booth1']/../td[3]/img&quot;}&#10;  (Session info: chrome=103.0.5060.114)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x01175FD3+2187219]&#10;&#09;Ordinal0 [0x0110E6D1+1763025]&#10;&#09;Ordinal0 [0x01023E78+802424]&#10;&#09;Ordinal0 [0x01051C10+990224]&#10;&#09;Ordinal0 [0x01051EAB+990891]&#10;&#09;Ordinal0 [0x0107EC92+1174674]&#10;&#09;Ordinal0 [0x0106CBD4+1100756]&#10;&#09;Ordinal0 [0x0107CFC2+1167298]&#10;&#09;Ordinal0 [0x0106C9A6+1100198]&#10;&#09;Ordinal0 [0x01046F80+946048]&#10;&#09;Ordinal0 [0x01047E76+949878]&#10;&#09;GetHandleVerifier [0x014190C2+2721218]&#10;&#09;GetHandleVerifier [0x0140AAF0+2662384]&#10;&#09;GetHandleVerifier [0x0120137A+526458]&#10;&#09;GetHandleVerifier [0x01200416+522518]&#10;&#09;Ordinal0 [0x01114EAB+1789611]&#10;&#09;Ordinal0 [0x011197A8+1808296]&#10;&#09;Ordinal0 [0x01119895+1808533]&#10;&#09;Ordinal0 [0x011226C1+1844929]&#10;&#09;BaseThreadInitThunk [0x778DFA29+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="f2d6bdb0c319e4b6d96a47e270780b87")&gt;

    def test_modify_booth(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        time.sleep(5)
        browser.find_element(By.XPATH, "//div[text()='Administration']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//div[text()='Permissions']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//label[text()='Change state']/../input").click()
        browser.find_element(By.XPATH, "//button[@class='OkStyle']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[@class='gwt-Button OkStyle']").click()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Equipment']").click()
        time.sleep(10)
        # Edit the Booth1.
&gt;       Booth1 = browser.find_element(By.XPATH, "//td[text()='booth1']/../td[3]/img")

test_VSTS43508.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:1248: in find_element
    return self.execute(Command.FIND_ELEMENT, {
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A787E5580&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//td[text()='booth1']/../td[3]/img"}
E         (Session info: chrome=103.0.5060.114)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x01175FD3+2187219]
E       	Ordinal0 [0x0110E6D1+1763025]
E       	Ordinal0 [0x01023E78+802424]
E       	Ordinal0 [0x01051C10+990224]
E       	Ordinal0 [0x01051EAB+990891]
E       	Ordinal0 [0x0107EC92+1174674]
E       	Ordinal0 [0x0106CBD4+1100756]
E       	Ordinal0 [0x0107CFC2+1167298]
E       	Ordinal0 [0x0106C9A6+1100198]
E       	Ordinal0 [0x01046F80+946048]
E       	Ordinal0 [0x01047E76+949878]
E       	GetHandleVerifier [0x014190C2+2721218]
E       	GetHandleVerifier [0x0140AAF0+2662384]
E       	GetHandleVerifier [0x0120137A+526458]
E       	GetHandleVerifier [0x01200416+522518]
E       	Ordinal0 [0x01114EAB+1789611]
E       	Ordinal0 [0x011197A8+1808296]
E       	Ordinal0 [0x01119895+1808533]
E       	Ordinal0 [0x011226C1+1844929]
E       	BaseThreadInitThunk [0x778DFA29+25]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]

f:\python\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VSTS38281" name="test_audit_generate" time="66.928"><failure message="AssertionError">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="48180b7488ad5bc16a1effa0f96f537d")&gt;

    def test_audit_generate(browser):
        # add all permission
        BaseFun(browser).grant_Allpermission()
        # 1.set permission
        AdministrationPage(browser).go_to_administration()
        browser.find_element(By.XPATH, "//div[text()='Signatures']").click()
        time.sleep(3)
        row = browser.find_element(By.XPATH, "//div[text()='General' and @class='gwt-Label']/../..")
        signature = row.find_element(By.TAG_NAME,  "input")
        reason = Select(row.find_element(By.TAG_NAME,  "select"))
        if not signature.is_selected():
            signature.click()
        reason.select_by_visible_text("Optional")
        time.sleep(3)
        apply = browser.find_element(By.XPATH, "//button[text()='Apply']")
        if apply.is_enabled():
            apply.click()
            time.sleep(3)
            text = "Apply Signature Successful"
            assert text in BaseFun(browser).get_AlterMessage()
        # 2. Update Admin areas
        browser.find_element(By.XPATH, "//div[text()='General']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//label[text()='Log on required for Execution System']").click()
        time.sleep(3)
        apply = browser.find_element(By.XPATH, "//button[text()='Apply']")
        if apply.is_enabled():
            apply.click()
            time.sleep(3)
        # check pop up signature
&gt;       AdministrationPage(browser).check_signature_optional()

test_VSTS38281.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;pages.Administration.AdministrationPage object at 0x0000021A787C9C40&gt;

    def check_signature_optional(self):
        # check pop up signature
&gt;       assert self.driver.find_element(By.XPATH, "//div[@class='DialogTitleName']").text == "Signature"
E       AssertionError

..\pages\Administration.py:54: AssertionError</failure></testcase><testcase classname="test_VSTS43293" name="test_Scale_date" time="96.038"><failure message="IndexError: list index out of range">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="cfd331565df0cb800e54de0c8f1098b6")&gt;

    def test_Scale_date(browser):
        # add all permission
        BaseFun(browser).grant_Allpermission()
        # 1.Navigate to Equipment page
        EquipmentPage(browser).go_to_Equipment()
        # 2.Select a scale
        scales = browser.find_elements(By.XPATH, "//table[@class='List_Table_Border_Style']")
        editScale = scales[1].find_elements(By.TAG_NAME,  "img")
        editScale[2].click()
        time.sleep(3)
        # 3.change last check date and expiration date
        # rows = browser.find_elements(By.XPATH, "//table[@class='List_Table_Border_Style']/tbody/tr")
        # print(len(rows))
        # cols = rows[8].find_elements(By.TAG_NAME,  "td")
        # print(len(cols))
        # Expiration Period (days)
        browser.find_element(By.XPATH, "//div[text()='Calibration Expiration Date:']/../../td[2]//input").send_keys("4/"+str(random.randint(1, 30))+"/22, 12:00:00 PM")
        time.sleep(2)
        browser.find_element(By.XPATH, "//table[@class='Edit_Sub_Panel']/../../td[2]//tr[@class='List_Background_Color']/../tr[2]").click()
        time.sleep(2)
        browser.find_element(By.XPATH, "//tr[@id='clicked_Row_Style']/td[4]").click()
        time.sleep(3)
        Period = browser.find_element(By.NAME, "expirationPeriod")
        Period.clear()
        Period.send_keys("556")
        Period.send_keys(Keys.ENTER)
        time.sleep(3)
        # last check date
        last_check_date = browser.find_element(By.XPATH, "//tr[@id='clicked_Row_Style']/td[5]")
        last_check_date.click()
        time.sleep(3)
        CheckDate = browser.find_element(By.XPATH, "//tr[@id='clicked_Row_Style']/td[5]/input")
        CheckDate.clear()
        date = "4/"+str(random.randint(1, 30))+"/22, 12:00:00 PM"
        CheckDate.send_keys(date)
        time.sleep(2)
        CheckDate.send_keys(Keys.ENTER)
        time.sleep(3)
        # get data
        check_date = last_check_date.text.split(',')[0]
        time.sleep(3)
        expiration_date = browser.find_element(By.XPATH, "//tr[@id='clicked_Row_Style']/td[6]").text.split(',')[0]
        print(check_date)
        print(expiration_date)
        time.sleep(3)
        apply = browser.find_element(By.XPATH, "//button[text()='Apply']")
        if apply.is_enabled():
            apply.click()
            time.sleep(3)
        # 4. check report
        ReportPage(browser).go_to_Report()
        time.sleep(3)
        # materials report
        try:
            browser.find_element(By.XPATH, "//div[text()='Scales']").click()
        except ElementNotInteractableException:
            browser.find_element(By.XPATH, "//div[text()='Audits']").click()
            browser.find_element(By.XPATH, "//div[text()='Scales']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[text()='Generate Audit']").click()
        time.sleep(3)
        rows = browser.find_elements(By.XPATH, "//table[@class='Permission_Table_body_Style']/tbody/tr")
        rows[1].find_element(By.TAG_NAME,  "img").click()
        time.sleep(3)
        date = browser.find_elements(By.XPATH, "//td[@class='Edit_Cell']")
&gt;       assert date[19].text == check_date
E       IndexError: list index out of range

test_VSTS43293.py:79: IndexError</failure></testcase><testcase classname="test_VSTS42059" name="test_create_campaign" time="105.164" /><testcase classname="test_VSTS31382" name="test_order_print_report" time="57.308"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//button[text()='Close']&quot;}&#10;  (Session info: chrome=103.0.5060.114)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x01175FD3+2187219]&#10;&#09;Ordinal0 [0x0110E6D1+1763025]&#10;&#09;Ordinal0 [0x01023E78+802424]&#10;&#09;Ordinal0 [0x01051C10+990224]&#10;&#09;Ordinal0 [0x01051EAB+990891]&#10;&#09;Ordinal0 [0x0107EC92+1174674]&#10;&#09;Ordinal0 [0x0106CBD4+1100756]&#10;&#09;Ordinal0 [0x0107CFC2+1167298]&#10;&#09;Ordinal0 [0x0106C9A6+1100198]&#10;&#09;Ordinal0 [0x01046F80+946048]&#10;&#09;Ordinal0 [0x01047E76+949878]&#10;&#09;GetHandleVerifier [0x014190C2+2721218]&#10;&#09;GetHandleVerifier [0x0140AAF0+2662384]&#10;&#09;GetHandleVerifier [0x0120137A+526458]&#10;&#09;GetHandleVerifier [0x01200416+522518]&#10;&#09;Ordinal0 [0x01114EAB+1789611]&#10;&#09;Ordinal0 [0x011197A8+1808296]&#10;&#09;Ordinal0 [0x01119895+1808533]&#10;&#09;Ordinal0 [0x011226C1+1844929]&#10;&#09;BaseThreadInitThunk [0x778DFA29+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="fc03482f268cde63e5aca2c919f4f6b3")&gt;

    def test_order_print_report(browser):
        config = configparser.ConfigParser()
        config.read(r'..\data\config.ini')
        user_fullname = config.get('login', 'user_fullname')
        # add all permission
        BaseFun(browser).grant_Allpermission()
        # 1.Navigate to order page and make change
        order_list = OrdersPage(browser).get_orders_list()
        order_list[1].find_element(By.NAME, "!checkall").click()
        browser.find_element(By.XPATH, "//a[text()='Print Report']").click()
        time.sleep(8)
&gt;       browser.find_element(By.XPATH, "//button[text()='Close']").click()

test_VSTS31382.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:1248: in find_element
    return self.execute(Command.FIND_ELEMENT, {
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A787E5100&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//button[text()='Close']"}
E         (Session info: chrome=103.0.5060.114)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x01175FD3+2187219]
E       	Ordinal0 [0x0110E6D1+1763025]
E       	Ordinal0 [0x01023E78+802424]
E       	Ordinal0 [0x01051C10+990224]
E       	Ordinal0 [0x01051EAB+990891]
E       	Ordinal0 [0x0107EC92+1174674]
E       	Ordinal0 [0x0106CBD4+1100756]
E       	Ordinal0 [0x0107CFC2+1167298]
E       	Ordinal0 [0x0106C9A6+1100198]
E       	Ordinal0 [0x01046F80+946048]
E       	Ordinal0 [0x01047E76+949878]
E       	GetHandleVerifier [0x014190C2+2721218]
E       	GetHandleVerifier [0x0140AAF0+2662384]
E       	GetHandleVerifier [0x0120137A+526458]
E       	GetHandleVerifier [0x01200416+522518]
E       	Ordinal0 [0x01114EAB+1789611]
E       	Ordinal0 [0x011197A8+1808296]
E       	Ordinal0 [0x01119895+1808533]
E       	Ordinal0 [0x011226C1+1844929]
E       	BaseThreadInitThunk [0x778DFA29+25]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]

f:\python\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VSTS40961" name="test_clean_rules_report" time="152.821" /><testcase classname="test_VSTS43384" name="test_BOM_add_Materials" time="137.039" /><testcase classname="test_VSTS45585" name="test_CampaignStatus" time="126.663" /><testcase classname="test_VSTS41179" name="test_all_permission" time="42.409" /><testcase classname="test_VSTS43253" name="test_materials_report" time="132.805"><failure message="IndexError: list index out of range">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="1907fef1f2e8c3eace40242097a42aef")&gt;

    def test_materials_report(browser):
        config = configparser.ConfigParser()
        config.read(r'..\data\config.ini')
        user_fullname = config.get('login', 'user_fullname')
        # add all permission
        BaseFun(browser).grant_Allpermission()
        # 1.Navigate to booth page and make change
        browser.find_element(By.XPATH, "//tr/td/div[text()='Material']").click()
        time.sleep(10)
        pending_BOM = browser.find_elements(By.XPATH, "//td[text()='Pending']/../td[6]")
        pending_BOM[2].click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//input[@name='targetType']").clear()
        time.sleep(3)
        random_str = BaseFun(browser).Random_Str(5)
        name = "report test " + random_str
        browser.find_element(By.XPATH, "//input[@name='targetType']").send_keys(name)
        browser.find_element(By.XPATH, "//input[@name='targetType']").send_keys(Keys.ENTER)
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[text()='Submit']").click()
        timedate = (datetime.datetime.now() + datetime.timedelta(seconds=20)).strftime("%m/%d/%y, %I:%M:%S %p")
        time.sleep(3)
        browser.find_element(By.XPATH, "//input[@class='Date_TextBox_Style']").send_keys(timedate)
        time.sleep(5)
        browser.find_element(By.XPATH, "//button[@id='Dialogbox_Bottom_OK_Button_Id']").click()
        time.sleep(5)
        browser.find_element(By.XPATH, "//button[@class='gwt-Button OkStyle']").click()
        time.sleep(20)
        browser.find_element(By.XPATH, "//a[text()='Refresh']").click()
        time.sleep(2)
        delete_BOM = browser.find_element(By.XPATH, "//td[text()='Obsolete']/../td[31]")
        delete_BOM.click()
        browser.find_element(By.XPATH, "//button[@class='gwt-Button OkStyle']").click()
        time.sleep(2)
        browser.find_element(By.XPATH, "//button[@class='gwt-Button OkStyle']").click()
        time.sleep(2)
        # 2.Navigate to materials report page
        ReportPage(browser).go_to_Report()
        # materials report
        try:
            browser.find_element(By.XPATH, "//div[text()='Materials']").click()
        except ElementNotInteractableException:
            browser.find_element(By.XPATH, "//div[text()='Audits']").click()
            browser.find_element(By.XPATH, "//div[text()='Materials']").click()
        user = Select(browser.find_elements(By.TAG_NAME,  "select")[1])
        material = Select(browser.find_elements(By.TAG_NAME,  "select")[0])
        start_time = browser.find_elements(By.XPATH, "//input[@class='Date_TextBox_Style']/../../td/img")[0]
        end_time = browser.find_elements(By.XPATH, "//input[@class='Date_TextBox_Style']/../../td/img")[1]
        # set criteria
        # start time
        start_time.click()
        browser.find_element(By.XPATH, "//button[text()='Zero']").click()
        time.sleep(3)
        user.select_by_visible_text(user_fullname)
        time.sleep(3)
        # end time
        end_time.click()
        browser.find_element(By.XPATH, "//button[text()='Now']").click()
        time.sleep(3)
        material.select_by_visible_text("1902")
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[text()='Generate Audit']").click()
        time.sleep(3)
        # 3.check the result is right
        columns = ["User", "Material"]
        dataTexts = [user_fullname, "1902"]
        ReportPage(browser).test_AuditData(columns, dataTexts)
        # 4.check show differences only.
        time.sleep(3)
        nums = [9, 11]
        data = ["Target type", name]
&gt;       ReportPage(browser).test_DifferenceData("gwt-Label", nums, data)

test_VSTS43253.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;pages.Report.ReportPage object at 0x0000021A78777D90&gt;
classname = 'gwt-Label', nums = [9, 11]
dataTexts = ['Target type', 'report test 3NUkC']

    def test_DifferenceData(self, classname, nums, dataTexts):
        self.driver.find_element(By.XPATH, "//label[text()='Show Difference Only']").click()
        time.sleep(3)
        rows = self.driver.find_elements(By.XPATH, "//table[@class='Permission_Table_body_Style']/tbody/tr")
&gt;       rows[1].find_element_by_tag_name("img").click()
E       IndexError: list index out of range

..\pages\Report.py:82: IndexError</failure></testcase><testcase classname="test_VSTS42107" name="test_scale_report" time="83.567"><failure message="IndexError: list index out of range">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="f97498882d1a6aaa9ce469c4bd4701d8")&gt;

    def test_scale_report(browser):
        config = configparser.ConfigParser()
        config.read(r'..\data\config.ini')
        user_fullname = config.get('login', 'user_fullname')
        # add all permission
        BaseFun(browser).grant_Allpermission()
        # 1.Navigate to scale page and make change
        EquipmentPage(browser).go_to_Equipment()
        scales = browser.find_elements(By.XPATH, "//table[@class='List_Table_Border_Style']")
        scale_name = browser.find_elements(By.XPATH, "//table[@class='List_Table_Border_Style']/tbody/tr[2]/td[1]")[1].text
        editScale = scales[1].find_elements(By.TAG_NAME,  "img")
        editScale[2].click()
        time.sleep(3)
        description = browser.find_element(By.NAME, "description")
        description.clear()
        random_str = BaseFun(browser).Random_Str(5)
        name = "test description report " + random_str
        description.send_keys(name)
        apply = browser.find_element(By.XPATH, "//button[text()='Apply']")
        if apply.is_enabled():
            apply.click()
            time.sleep(3)
        # 2.Navigate to report page
        ReportPage(browser).go_to_Report()
        try:
            browser.find_element(By.XPATH, "//div[text()='Scales']").click()
        except ElementNotInteractableException:
            browser.find_element(By.XPATH, "//div[text()='Audits']").click()
            browser.find_element(By.XPATH, "//div[text()='Scales']").click()
        # browser.find_element(By.XPATH, "//div[text()='Audits']").click()
        # # Scales report
        # browser.find_element(By.XPATH, "//div[text()='Scales']").click()
        booth = Select(browser.find_elements(By.TAG_NAME,  "select")[0])
        scale = Select(browser.find_elements(By.TAG_NAME,  "select")[1])
        user = Select(browser.find_elements(By.TAG_NAME,  "select")[2])
        start_time = browser.find_elements(By.XPATH, "//input[@class='Date_TextBox_Style']/../../td/img")[0]
        end_time = browser.find_elements(By.XPATH, "//input[@class='Date_TextBox_Style']/../../td/img")[1]
        action = browser.find_element(By.XPATH, "//label[text()='Modified']")
        time.sleep(3)
        # set criteria
        # # start time
        # start_time.click()
        # browser.find_element(By.XPATH, "//button[text()='Zero']").click()
        # time.sleep(3)
        booth.select_by_value("booth2")
        time.sleep(3)
        # # end time
        # end_time.click()
        # browser.find_element(By.XPATH, "//button[text()='Now']").click()
        # time.sleep(3)
        user.select_by_visible_text(user_fullname)
        time.sleep(3)
        scale.select_by_visible_text(scale_name)
        time.sleep(3)
        action.click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[text()='Generate Audit']").click()
        time.sleep(3)
        # check the result is right
        columns = ["User", "Scale", "Action"]
        dataTexts = [user_fullname, scale_name, "Modified"]
        ReportPage(browser).test_AuditData(columns, dataTexts)
        # rows = browser.find_elements(By.XPATH, "//table[@class='Permission_Table_body_Style']/tbody/tr")
        # for row in rows:
        #     # date?
        #     u = row.find_elements(By.TAG_NAME,  "td")[2].text
        #     s = row.find_elements(By.TAG_NAME,  "td")[3].text
        #     a = row.find_elements(By.TAG_NAME,  "td")[4].text
        #     print(u)
        #     print(s)
        #     print(a)
        #     if u != "" and s != "" and a != "":
        #         assert u == "qapart(qapart)", s == "PL1501-S"
        #         assert a == "Modified"
        # time.sleep(3)
        # 3.check show differences only.
        nums = [3]
        data = [name]
&gt;       ReportPage(browser).test_DifferenceData("gwt-HTML", nums, data)

test_VSTS42107.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;pages.Report.ReportPage object at 0x0000021A78868430&gt;
classname = 'gwt-HTML', nums = [3]
dataTexts = ['test description report 3NUkC']

    def test_DifferenceData(self, classname, nums, dataTexts):
        self.driver.find_element(By.XPATH, "//label[text()='Show Difference Only']").click()
        time.sleep(3)
        rows = self.driver.find_elements(By.XPATH, "//table[@class='Permission_Table_body_Style']/tbody/tr")
&gt;       rows[1].find_element_by_tag_name("img").click()
E       IndexError: list index out of range

..\pages\Report.py:82: IndexError</failure></testcase><testcase classname="test_VSTS41249" name="test_Inventory" time="105.191" /><testcase classname="test_VSTS41360" name="test_delete_scale_two_user" time="146.198" /><testcase classname="test_VSTS45683" name="test_MaterialStatus" time="98.059"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//td[text()='07/25/22, 11:11:08 AM']/../td[5]&quot;}&#10;  (Session info: chrome=103.0.5060.114)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x01175FD3+2187219]&#10;&#09;Ordinal0 [0x0110E6D1+1763025]&#10;&#09;Ordinal0 [0x01023E78+802424]&#10;&#09;Ordinal0 [0x01051C10+990224]&#10;&#09;Ordinal0 [0x01051EAB+990891]&#10;&#09;Ordinal0 [0x0107EC92+1174674]&#10;&#09;Ordinal0 [0x0106CBD4+1100756]&#10;&#09;Ordinal0 [0x0107CFC2+1167298]&#10;&#09;Ordinal0 [0x0106C9A6+1100198]&#10;&#09;Ordinal0 [0x01046F80+946048]&#10;&#09;Ordinal0 [0x01047E76+949878]&#10;&#09;GetHandleVerifier [0x014190C2+2721218]&#10;&#09;GetHandleVerifier [0x0140AAF0+2662384]&#10;&#09;GetHandleVerifier [0x0120137A+526458]&#10;&#09;GetHandleVerifier [0x01200416+522518]&#10;&#09;Ordinal0 [0x01114EAB+1789611]&#10;&#09;Ordinal0 [0x011197A8+1808296]&#10;&#09;Ordinal0 [0x01119895+1808533]&#10;&#09;Ordinal0 [0x011226C1+1844929]&#10;&#09;BaseThreadInitThunk [0x778DFA29+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="57a2a5b93ea03e5ac2c5c48cc0f74d4a")&gt;

    def test_MaterialStatus(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Material']").click()
        time.sleep(10)
        pending_BOM = browser.find_elements(By.XPATH, "//td[text()='Pending']/../td[6]")
        pending_BOM[2].click()
        time.sleep(2)
        browser.find_element(By.XPATH, "//input[@name='weighNote']/../../td[2]/button").click()
        time.sleep(2)
        browser.find_element(By.XPATH, "//textarea[@class='NoteDialogTextArea']").clear()
        browser.find_element(By.XPATH, "//textarea[@class='NoteDialogTextArea']").send_keys("Weigh Notes")
        browser.find_element(By.ID, "Dialogbox_Bottom_OK_Button_Id").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[text()='Submit']").click()
        time.sleep(2)
        timedate = (datetime.datetime.now()+datetime.timedelta(minutes=1)).strftime("%m/%d/%y, %I:%M:%S %p")
        if timedate[10] == '0':
            timedate = (timedate[:10]+timedate[11:]).lstrip('0')
        time.sleep(3)
        browser.find_element(By.XPATH, "//input[@class='Date_TextBox_Style']").send_keys(timedate)
        time.sleep(5)
        browser.find_element(By.XPATH, "//button[@id='Dialogbox_Bottom_OK_Button_Id']").click()
        assert 'Submit was successful!' in BaseFun(browser).get_AlterMessage()
        time.sleep(13)
&gt;       BOM_status1 = browser.find_element(By.XPATH, "//td[text()='"+timedate+"']/../td[5]").text

test_VSTS45683.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:1248: in find_element
    return self.execute(Command.FIND_ELEMENT, {
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A788D17F0&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//td[text()='07/25/22, 11:11:08 AM']/../td[5]"}
E         (Session info: chrome=103.0.5060.114)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x01175FD3+2187219]
E       	Ordinal0 [0x0110E6D1+1763025]
E       	Ordinal0 [0x01023E78+802424]
E       	Ordinal0 [0x01051C10+990224]
E       	Ordinal0 [0x01051EAB+990891]
E       	Ordinal0 [0x0107EC92+1174674]
E       	Ordinal0 [0x0106CBD4+1100756]
E       	Ordinal0 [0x0107CFC2+1167298]
E       	Ordinal0 [0x0106C9A6+1100198]
E       	Ordinal0 [0x01046F80+946048]
E       	Ordinal0 [0x01047E76+949878]
E       	GetHandleVerifier [0x014190C2+2721218]
E       	GetHandleVerifier [0x0140AAF0+2662384]
E       	GetHandleVerifier [0x0120137A+526458]
E       	GetHandleVerifier [0x01200416+522518]
E       	Ordinal0 [0x01114EAB+1789611]
E       	Ordinal0 [0x011197A8+1808296]
E       	Ordinal0 [0x01119895+1808533]
E       	Ordinal0 [0x011226C1+1844929]
E       	BaseThreadInitThunk [0x778DFA29+25]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]

f:\python\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VSTS42939" name="test_Modifymaterials" time="76.169" /><testcase classname="test_VSTS31357" name="test_BOMdelete" time="150.828"><failure message="IndexError: list index out of range">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="f21f8df262db2e514f7d830af845556c")&gt;

    def test_BOMdelete(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Material']").click()
        browser.find_element(By.XPATH, "//tr/td/div[text()='BOM Exceptions']").click()
        time.sleep(10)
        pending_BOM = browser.find_elements(By.XPATH, "//td[text()='Pending']/../td[7]")
        pending_BOM[1].click()
        timedate = MaterialPage(browser).modifyBOM()
        time.sleep(70)
        # delete 'obsolete'
        obsolete_BOM = browser.find_elements(By.XPATH, "//td[text()='Obsolete']/../td[12]")
&gt;       obsolete_BOM[0].click()
E       IndexError: list index out of range

test_VSTS31357.py:21: IndexError</failure></testcase><testcase classname="test_VSTS41361" name="test_clean_rules_states" time="103.312" /><testcase classname="test_VSTS42062" name="test_audit_orders_report" time="112.152" /><testcase classname="test_VSTS32426" name="test_report_generate" time="57.427" /><testcase classname="test_VSTS43411" name="test_manage_standardization_type" time="152.235" /><testcase classname="test_VSTS42812" name="test_booth_report" time="113.620" /><testcase classname="test_VSTS41378" name="test_print_picture" time="48.854" /><testcase classname="test_VSTS29668" name="test_refresh" time="56.190"><failure message="assert 1 == 5&#10; +  where 1 = len([&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;733bcface2fed83c947c9babc33714a6&quot;, element=&quot;b28e4d2b-dc20-449d-9e08-0ea80ca743c8&quot;)&gt;])">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="733bcface2fed83c947c9babc33714a6")&gt;

    def test_refresh(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Order']").click()
        time.sleep(5)
        browser.find_element(By.XPATH, "//input[@class = 'Tab_Manu_bar_Margin Tab_Menu_Bar_Search_Box']").send_keys("test1")
        order_name = browser.find_elements(By.XPATH, "//table[@class='Order_Table_body_Style_Collapse']/tbody/tr")[1].find_elements(By.TAG_NAME,"td")[1]
        assert 'test1' in order_name.text
        browser.find_element(By.XPATH, "//table[@class='Tab_Manu_bar_Wide_Margin']/tbody/tr/td/table/tbody/tr/td/button").click()
        time.sleep(2)
        order_list = browser.find_elements(By.XPATH, "//table[@class='Order_Table_body_Style_Collapse']/tbody/tr")
&gt;       assert len(order_list) == 5
E       assert 1 == 5
E        +  where 1 = len([&lt;selenium.webdriver.remote.webelement.WebElement (session="733bcface2fed83c947c9babc33714a6", element="b28e4d2b-dc20-449d-9e08-0ea80ca743c8")&gt;])

test_VSTS29668.py:20: AssertionError</failure></testcase><testcase classname="test_VSTS43376" name="test_commit_user_exit" time="83.431" /><testcase classname="test_VSTS91550" name="test_operations_scale" time="109.301" /><testcase classname="test_VSTS40891" name="test_clean_rules_states" time="50.913" /><testcase classname="test_VSTS42966" name="test_booth_delete_when_edit" time="144.184" /><testcase classname="test_VSTS31310" name="test_booth_edit" time="98.931" /><testcase classname="test_VSTS31283" name="test_user_exits_report" time="104.580" /><testcase classname="test_VSTS45682" name="test_add_twoBooth" time="120.593" /><testcase classname="test_VSTS31390" name="test_BOM_Exceptions_report" time="186.208" /><testcase classname="test_VSTS41331" name="test_Scale_info_no_modify" time="71.957" /><testcase classname="test_VSTS91537" name="test_BOM_add_Active" time="90.186"><failure message="selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : &#10;Message: unexpected alert open: {Alert text : }&#10;  (Session info: chrome=103.0.5060.114)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x01175FD3+2187219]&#10;&#09;Ordinal0 [0x0110E6D1+1763025]&#10;&#09;Ordinal0 [0x01023E78+802424]&#10;&#09;Ordinal0 [0x0107CE32+1166898]&#10;&#09;Ordinal0 [0x0106C9A6+1100198]&#10;&#09;Ordinal0 [0x01046F80+946048]&#10;&#09;Ordinal0 [0x01047E76+949878]&#10;&#09;GetHandleVerifier [0x014190C2+2721218]&#10;&#09;GetHandleVerifier [0x0140AAF0+2662384]&#10;&#09;GetHandleVerifier [0x0120137A+526458]&#10;&#09;GetHandleVerifier [0x01200416+522518]&#10;&#09;Ordinal0 [0x01114EAB+1789611]&#10;&#09;Ordinal0 [0x011197A8+1808296]&#10;&#09;Ordinal0 [0x01119895+1808533]&#10;&#09;Ordinal0 [0x011226C1+1844929]&#10;&#09;BaseThreadInitThunk [0x778DFA29+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="44ed6eb9679fccd59c0c432fda036b0c")&gt;

    def test_BOM_add_Active(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Material']").click()
        browser.find_element(By.XPATH, "//tr/td/div[text()='BOM Exceptions']").click()
        time.sleep(10)
        bomName = BaseFun(browser).Random_Str(5)
        MaterialPage(browser).Add_BOM(bomName)
        browser.find_element(By.XPATH, "//button[@class='gwt-Button OkStyle']").click()
        browser.refresh()
        time.sleep(6)
        # edit the pending BOM
&gt;       browser.find_element(By.XPATH, "//td[text()='"+bomName+"']/../td[7]").click()

test_VSTS91537.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:1248: in find_element
    return self.execute(Command.FIND_ELEMENT, {
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A78908D90&gt;
response = {'status': 500, 'value': '{"value":{"data":{"text":"{Alert text : "},"error":"unexpected alert open","message":"unexpe...\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
&gt;           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
E           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : 
E           Message: unexpected alert open: {Alert text : }
E             (Session info: chrome=103.0.5060.114)
E           Stacktrace:
E           Backtrace:
E           	Ordinal0 [0x01175FD3+2187219]
E           	Ordinal0 [0x0110E6D1+1763025]
E           	Ordinal0 [0x01023E78+802424]
E           	Ordinal0 [0x0107CE32+1166898]
E           	Ordinal0 [0x0106C9A6+1100198]
E           	Ordinal0 [0x01046F80+946048]
E           	Ordinal0 [0x01047E76+949878]
E           	GetHandleVerifier [0x014190C2+2721218]
E           	GetHandleVerifier [0x0140AAF0+2662384]
E           	GetHandleVerifier [0x0120137A+526458]
E           	GetHandleVerifier [0x01200416+522518]
E           	Ordinal0 [0x01114EAB+1789611]
E           	Ordinal0 [0x011197A8+1808296]
E           	Ordinal0 [0x01119895+1808533]
E           	Ordinal0 [0x011226C1+1844929]
E           	BaseThreadInitThunk [0x778DFA29+25]
E           	RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]
E           	RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]

f:\python\lib\site-packages\selenium\webdriver\remote\errorhandler.py:246: UnexpectedAlertPresentException</failure></testcase><testcase classname="test_VSTS43369" name="test_print_picture" time="41.919" /><testcase classname="test_VSTS29463" name="test_user_exit_runtest" time="113.886" /><testcase classname="test_VSTS42821" name="test_create_machine_name" time="82.312" /><testcase classname="test_VSTS40888" name="test_selectall_materials" time="121.090" /><testcase classname="test_VSTS41001" name="test_booth_edit" time="134.285" /><testcase classname="test_VSTS45751" name="test_campaigns_report" time="88.017"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//td[text()='CampaignReport']/../td[10]&quot;}&#10;  (Session info: chrome=103.0.5060.114)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x01175FD3+2187219]&#10;&#09;Ordinal0 [0x0110E6D1+1763025]&#10;&#09;Ordinal0 [0x01023E78+802424]&#10;&#09;Ordinal0 [0x01051C10+990224]&#10;&#09;Ordinal0 [0x01051EAB+990891]&#10;&#09;Ordinal0 [0x0107EC92+1174674]&#10;&#09;Ordinal0 [0x0106CBD4+1100756]&#10;&#09;Ordinal0 [0x0107CFC2+1167298]&#10;&#09;Ordinal0 [0x0106C9A6+1100198]&#10;&#09;Ordinal0 [0x01046F80+946048]&#10;&#09;Ordinal0 [0x01047E76+949878]&#10;&#09;GetHandleVerifier [0x014190C2+2721218]&#10;&#09;GetHandleVerifier [0x0140AAF0+2662384]&#10;&#09;GetHandleVerifier [0x0120137A+526458]&#10;&#09;GetHandleVerifier [0x01200416+522518]&#10;&#09;Ordinal0 [0x01114EAB+1789611]&#10;&#09;Ordinal0 [0x011197A8+1808296]&#10;&#09;Ordinal0 [0x01119895+1808533]&#10;&#09;Ordinal0 [0x011226C1+1844929]&#10;&#09;BaseThreadInitThunk [0x778DFA29+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="30727ef9675f2994793b7e8a1d0943ca")&gt;

    def test_campaigns_report(browser):
        config = configparser.ConfigParser()
        config.read(r'..\data\config.ini')
        user_fullname = config.get('login', 'user_fullname')
        # add all permission
        BaseFun(browser).grant_Allpermission()
        # 1.Navigate to campaign page and make change
        browser.find_element(By.XPATH, "//tr/td/div[text()='Order']").click()
        time.sleep(5)
        #  select a order, click Create campaign
        i = 0
        while i in range(10):
            try:
                browser.find_element(By.XPATH, "//td[text()='test3']")
            except NoSuchElementException:
                browser.find_element(By.XPATH, "//a[text()='Refresh']").click()
                time.sleep(3)
            i = i + 1
        time.sleep(3)
        select_order = browser.find_element(By.XPATH, "//td[text()='test3']")
        time.sleep(3)
        select_order.find_element(By.XPATH, "../td/span[@class='gwt-CheckBox']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[@class='WDAnchor_Common_Image16_Style CreateCampaign_Image']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//input[@class='WD_TextBox']").send_keys("CampaignReport")
        time.sleep(3)
        browser.find_element(By.ID, "Dialogbox_Bottom_OK_Button_Id").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[@class='gwt-Button OkStyle']").click()
        time.sleep(3)
        # modify the campaign
        browser.find_element(By.XPATH, "//tr/td/div[text()='Campaigns']").click()
        time.sleep(5)
        browser.find_element(By.XPATH, "//td[text()='CampaignReport']/../td[9]").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//td[text()='1072']/../td[8]/select").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//option[@value='booth1']").click()
        # Select(browser.find_element(By.XPATH, "//td[text()='1072']/../td[8]/select")).select_by_value("booth1")
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[text()='Apply']").click()
        # active the campaign
        browser.find_element(By.XPATH, "//td[text()='CampaignReport']/../td[1]/span/input").click()
        browser.find_element(By.XPATH, "//a[text()='Activate Orders for Selected Campaigns']").click()
        browser.refresh()
        time.sleep(3)
        # delete the campaign
&gt;       browser.find_element(By.XPATH, "//td[text()='CampaignReport']/../td[10]").click()

test_VSTS45751.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:1248: in find_element
    return self.execute(Command.FIND_ELEMENT, {
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A78777CA0&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//td[text()='CampaignReport']/../td[10]"}
E         (Session info: chrome=103.0.5060.114)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x01175FD3+2187219]
E       	Ordinal0 [0x0110E6D1+1763025]
E       	Ordinal0 [0x01023E78+802424]
E       	Ordinal0 [0x01051C10+990224]
E       	Ordinal0 [0x01051EAB+990891]
E       	Ordinal0 [0x0107EC92+1174674]
E       	Ordinal0 [0x0106CBD4+1100756]
E       	Ordinal0 [0x0107CFC2+1167298]
E       	Ordinal0 [0x0106C9A6+1100198]
E       	Ordinal0 [0x01046F80+946048]
E       	Ordinal0 [0x01047E76+949878]
E       	GetHandleVerifier [0x014190C2+2721218]
E       	GetHandleVerifier [0x0140AAF0+2662384]
E       	GetHandleVerifier [0x0120137A+526458]
E       	GetHandleVerifier [0x01200416+522518]
E       	Ordinal0 [0x01114EAB+1789611]
E       	Ordinal0 [0x011197A8+1808296]
E       	Ordinal0 [0x01119895+1808533]
E       	Ordinal0 [0x011226C1+1844929]
E       	BaseThreadInitThunk [0x778DFA29+25]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]

f:\python\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VSTS31783" name="test_clean_rules_save" time="125.945" /><testcase classname="test_VSTS42287" name="test_materials_delete" time="253.660" /><testcase classname="test_VSTS29638" name="test_permission_modify" time="59.033" /><testcase classname="test_VSTS31386" name="test_user_exit_tool_bar" time="60.298" /><testcase classname="test_VSTS29484" name="test_BOMstatus" time="150.811" /><testcase classname="test_VSTS40873" name="test_no_permission" time="47.397" /><testcase classname="test_VSTS29639.TestEdit" name="test_Order" time="42.792"><failure message="selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable&#10;  (Session info: chrome=103.0.5060.114)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x01175FD3+2187219]&#10;&#09;Ordinal0 [0x0110E6D1+1763025]&#10;&#09;Ordinal0 [0x01023D40+802112]&#10;&#09;Ordinal0 [0x01052C03+994307]&#10;&#09;Ordinal0 [0x010489B3+952755]&#10;&#09;Ordinal0 [0x0106CB8C+1100684]&#10;&#09;Ordinal0 [0x01048394+951188]&#10;&#09;Ordinal0 [0x0106CDA4+1101220]&#10;&#09;Ordinal0 [0x0107CFC2+1167298]&#10;&#09;Ordinal0 [0x0106C9A6+1100198]&#10;&#09;Ordinal0 [0x01046F80+946048]&#10;&#09;Ordinal0 [0x01047E76+949878]&#10;&#09;GetHandleVerifier [0x014190C2+2721218]&#10;&#09;GetHandleVerifier [0x0140AAF0+2662384]&#10;&#09;GetHandleVerifier [0x0120137A+526458]&#10;&#09;GetHandleVerifier [0x01200416+522518]&#10;&#09;Ordinal0 [0x01114EAB+1789611]&#10;&#09;Ordinal0 [0x011197A8+1808296]&#10;&#09;Ordinal0 [0x01119895+1808533]&#10;&#09;Ordinal0 [0x011226C1+1844929]&#10;&#09;BaseThreadInitThunk [0x778DFA29+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]">self = &lt;testcase.test_VSTS29639.TestEdit object at 0x0000021A788139A0&gt;
browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="8c09a1a3896d33e0901a8ac934397b1f")&gt;

    def test_Order(self,browser):
        # order
&gt;       TestEdit.editselect_tabing(self, browser, "Orders", "Report", 3, 0)

test_VSTS29639.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_VSTS29639.py:35: in editselect_tabing
    editList[n1].click()
f:\python\lib\site-packages\selenium\webdriver\remote\webelement.py:81: in click
    self._execute(Command.CLICK_ELEMENT)
f:\python\lib\site-packages\selenium\webdriver\remote\webelement.py:710: in _execute
    return self._parent.execute(command, params)
f:\python\lib\site-packages\selenium\webdriver\remote\webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A788065B0&gt;
response = {'status': 400, 'value': '{"value":{"error":"element not interactable","message":"element not interactable\\n  (Sessio...\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77A87A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable
E         (Session info: chrome=103.0.5060.114)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x01175FD3+2187219]
E       	Ordinal0 [0x0110E6D1+1763025]
E       	Ordinal0 [0x01023D40+802112]
E       	Ordinal0 [0x01052C03+994307]
E       	Ordinal0 [0x010489B3+952755]
E       	Ordinal0 [0x0106CB8C+1100684]
E       	Ordinal0 [0x01048394+951188]
E       	Ordinal0 [0x0106CDA4+1101220]
E       	Ordinal0 [0x0107CFC2+1167298]
E       	Ordinal0 [0x0106C9A6+1100198]
E       	Ordinal0 [0x01046F80+946048]
E       	Ordinal0 [0x01047E76+949878]
E       	GetHandleVerifier [0x014190C2+2721218]
E       	GetHandleVerifier [0x0140AAF0+2662384]
E       	GetHandleVerifier [0x0120137A+526458]
E       	GetHandleVerifier [0x01200416+522518]
E       	Ordinal0 [0x01114EAB+1789611]
E       	Ordinal0 [0x011197A8+1808296]
E       	Ordinal0 [0x01119895+1808533]
E       	Ordinal0 [0x011226C1+1844929]
E       	BaseThreadInitThunk [0x778DFA29+25]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A9E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77A87A6E+238]

f:\python\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: ElementNotInteractableException</failure></testcase><testcase classname="test_VSTS29639.TestEdit" name="test_Equipment" time="90.359" /><testcase classname="test_VSTS29639.TestEdit" name="test_Material" time="59.744" /><testcase classname="test_VSTS45776" name="test_create_machine_name" time="73.593" /><testcase classname="test_VSTS31064" name="test_Scale_info" time="107.695" /><testcase classname="test_VSTS31472" name="test_search" time="44.735" /><testcase classname="test_VSTS91464" name="test_create_machine_name" time="79.388" /><testcase classname="test_VSTS45684" name="test_user_exit_runtest_nochange" time="59.168" /><testcase classname="test_VSTS43382" name="test_order_add_material" time="83.766"><failure message="assert '' in ['Yes', 'No']&#10; +  where '' = &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;d31d1d50db86b692fc660135cb62e88d&quot;, element=&quot;916b36c3-05f7-4423-b1b1-2bd6b8aaef5e&quot;)&gt;.text">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="d31d1d50db86b692fc660135cb62e88d")&gt;

    def test_order_add_material(browser):
        # add all permission
        BaseFun(browser).grant_Allpermission()
        # 1.Navigate to order page and Create campaign
        # test1
        browser.find_element(By.XPATH, "//tr/td/div[text()='Order']").click()
        time.sleep(5)
        #  select a order
        i = 0
        while i in range(10):
            try:
                browser.find_element(By.XPATH, "//td[text()='test3']")
            except NoSuchElementException:
                browser.find_element(By.XPATH, "//a[text()='Refresh']").click()
                time.sleep(3)
            i = i + 1
        time.sleep(3)
        select_order = browser.find_element(By.XPATH, "//td[text()='test3']")
        time.sleep(3)
        select_order.find_element(By.XPATH, "..//td/span[@class='gwt-CheckBox']").click()
        time.sleep(3)
        status = select_order.find_element(By.XPATH, "../td[7]").text
        time.sleep(3)
        # active order
        if status == "Planned":
            browser.find_element(By.XPATH, "//button[@class='WDAnchor_Common_Image16_Style OrderActivate_Image']").click()
            time.sleep(3)
        assert "Active" == select_order.find_element(By.XPATH, "../td[7]").text
        time.sleep(3)
        # check sequence
        force_sequence = select_order.find_element(By.XPATH, "../td[15]").text
        result = ["Yes", "No"]
        assert force_sequence in result
        # click Create campaign
        browser.find_element(By.XPATH, "//button[@class='WDAnchor_Common_Image16_Style CreateCampaign_Image']").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//input[@class='WD_TextBox']").send_keys("CampaignMaterial")
        time.sleep(3)
        browser.find_element(By.ID, "Dialogbox_Bottom_OK_Button_Id").click()
        time.sleep(3)
        browser.find_element(By.XPATH, "//button[@class='gwt-Button OkStyle']").click()
        time.sleep(3)
        # 2. add material
        select_order.find_element(By.XPATH, "../td/img").click()
        time.sleep(3)
        origin_materails = browser.find_elements(By.XPATH, "//a[text()='Material']/../../../../../../../../../../../../tr"
                                                           "/td[@class='Inner_Column_Left'][2]")
        oms = []
        for om in origin_materails:
            oms.append(om.text)
            print(oms)
        # check yes/no Allow multiple lots per order
        lots = browser.find_elements(By.XPATH, "//table[@class='Order_Table_body_Style_Collapse']/tbody/tr/td["
                                               "@class='Inner_Column_Left'][24]")
        for lot in lots:
&gt;           assert lot.text in result
E           assert '' in ['Yes', 'No']
E            +  where '' = &lt;selenium.webdriver.remote.webelement.WebElement (session="d31d1d50db86b692fc660135cb62e88d", element="916b36c3-05f7-4423-b1b1-2bd6b8aaef5e")&gt;.text

test_VSTS43382.py:69: AssertionError</failure></testcase><testcase classname="test_VSTS37540" name="test_BOMDelete" time="87.923"><failure message="assert 'Save was successful' in 'The BOM version of a pending status product code already exists. Please enter a unique one!'&#10; +  where 'The BOM version of a pending status product code already exists. Please enter a unique one!' = &lt;bound method BaseFun.get_AlterMessage of &lt;common.baseFun.BaseFun object at 0x0000021A789BAD60&gt;&gt;()&#10; +    where &lt;bound method BaseFun.get_AlterMessage of &lt;common.baseFun.BaseFun object at 0x0000021A789BAD60&gt;&gt; = &lt;common.baseFun.BaseFun object at 0x0000021A789BAD60&gt;.get_AlterMessage&#10; +      where &lt;common.baseFun.BaseFun object at 0x0000021A789BAD60&gt; = BaseFun(&lt;selenium.webdriver.chrome.webdriver.WebDriver (session=&quot;ece01480b38e3d53d37c20cbc9498132&quot;)&gt;)">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="ece01480b38e3d53d37c20cbc9498132")&gt;

    def test_BOMDelete(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Material']").click()
        browser.find_element(By.XPATH, "//tr/td/div[text()='BOM Exceptions']").click()
        time.sleep(10)
        # add a pending BOM
        bomName = BaseFun(browser).Random_Str(5)
        MaterialPage(browser).Add_BOM(bomName)
        pending_xpath = "//td[text()='" + bomName + "']/../td[12]"
&gt;       assert "Save was successful" in BaseFun(browser).get_AlterMessage()
E       assert 'Save was successful' in 'The BOM version of a pending status product code already exists. Please enter a unique one!'
E        +  where 'The BOM version of a pending status product code already exists. Please enter a unique one!' = &lt;bound method BaseFun.get_AlterMessage of &lt;common.baseFun.BaseFun object at 0x0000021A789BAD60&gt;&gt;()
E        +    where &lt;bound method BaseFun.get_AlterMessage of &lt;common.baseFun.BaseFun object at 0x0000021A789BAD60&gt;&gt; = &lt;common.baseFun.BaseFun object at 0x0000021A789BAD60&gt;.get_AlterMessage
E        +      where &lt;common.baseFun.BaseFun object at 0x0000021A789BAD60&gt; = BaseFun(&lt;selenium.webdriver.chrome.webdriver.WebDriver (session="ece01480b38e3d53d37c20cbc9498132")&gt;)

test_VSTS37540.py:20: AssertionError</failure></testcase><testcase classname="test_VSTS36270" name="test_delete_permission" time="226.120" /><testcase classname="test_VSTS42356" name="test_two_user_edit_order" time="101.543" /><testcase classname="test_VSTS29544" name="test_modifyBooth" time="74.874" /><testcase classname="test_VSTS42288" name="test_BOMAdd_modify" time="91.045"><failure message="assert 'Save was successful' in 'The BOM version of a pending status product code already exists. Please enter a unique one!'&#10; +  where 'The BOM version of a pending status product code already exists. Please enter a unique one!' = &lt;bound method BaseFun.get_AlterMessage of &lt;common.baseFun.BaseFun object at 0x0000021A788B1BB0&gt;&gt;()&#10; +    where &lt;bound method BaseFun.get_AlterMessage of &lt;common.baseFun.BaseFun object at 0x0000021A788B1BB0&gt;&gt; = &lt;common.baseFun.BaseFun object at 0x0000021A788B1BB0&gt;.get_AlterMessage&#10; +      where &lt;common.baseFun.BaseFun object at 0x0000021A788B1BB0&gt; = BaseFun(&lt;selenium.webdriver.chrome.webdriver.WebDriver (session=&quot;b27f7e53cfbb3678942723c8152039ca&quot;)&gt;)">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="b27f7e53cfbb3678942723c8152039ca")&gt;

    def test_BOMAdd_modify(browser):
        time.sleep(5)
        BaseFun(browser).grant_Allpermission()
        browser.find_element(By.XPATH, "//tr/td/div[text()='Material']").click()
        browser.find_element(By.XPATH, "//tr/td/div[text()='BOM Exceptions']").click()
        time.sleep(10)
        # add a pending BOM
        BomName = BaseFun(browser).Random_Str(7)
        MaterialPage(browser).Add_BOM(BomName)
        time.sleep(3)
&gt;       assert "Save was successful" in BaseFun(browser).get_AlterMessage()
E       assert 'Save was successful' in 'The BOM version of a pending status product code already exists. Please enter a unique one!'
E        +  where 'The BOM version of a pending status product code already exists. Please enter a unique one!' = &lt;bound method BaseFun.get_AlterMessage of &lt;common.baseFun.BaseFun object at 0x0000021A788B1BB0&gt;&gt;()
E        +    where &lt;bound method BaseFun.get_AlterMessage of &lt;common.baseFun.BaseFun object at 0x0000021A788B1BB0&gt;&gt; = &lt;common.baseFun.BaseFun object at 0x0000021A788B1BB0&gt;.get_AlterMessage
E        +      where &lt;common.baseFun.BaseFun object at 0x0000021A788B1BB0&gt; = BaseFun(&lt;selenium.webdriver.chrome.webdriver.WebDriver (session="b27f7e53cfbb3678942723c8152039ca")&gt;)

test_VSTS42288.py:18: AssertionError</failure></testcase></testsuite></testsuites>